package com.example.blockfinal;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.5.
 */
@SuppressWarnings("rawtypes")
public class Sanphamnongnghiep extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b50615f6480620000216000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806397e26ab5116100a2578063d1d2080511610071578063d1d2080514611a0c578063e50d53b014611bd4578063ec2f805614611f23578063f570f86114612272578063ffbfee95146122ca5761010b565b806397e26ab514610dc2578063a0ca9858146111a8578063adc91ec514611460578063c504eb361461176c5761010b565b80636924b1c2116100de5780636924b1c21461065f5780637f8cd48d14610880578063812f582a14610ab457806386f353e314610d545761010b565b80631665cde9146101105780631ac815201461012e5780633b13bebd146102b857806357169f2d14610314575b600080fd5b61011861256a565b6040518082815260200191505060405180910390f35b61029e6004803603606081101561014457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561018157600080fd5b82018360208201111561019357600080fd5b803590602001918460018302840111640100000000831117156101b557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561021857600080fd5b82018360208201111561022a57600080fd5b8035906020019184600183028401116401000000008311171561024c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612577565b604051808215151515815260200191505060405180910390f35b6102fa600480360360208110156102ce57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612630565b604051808215151515815260200191505060405180910390f35b610649600480360360c081101561032a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561036757600080fd5b82018360208201111561037957600080fd5b8035906020019184600183028401116401000000008311171561039b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156103fe57600080fd5b82018360208201111561041057600080fd5b8035906020019184600183028401116401000000008311171561043257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561049557600080fd5b8201836020820111156104a757600080fd5b803590602001918460018302840111640100000000831117156104c957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561052c57600080fd5b82018360208201111561053e57600080fd5b8035906020019184600183028401116401000000008311171561056057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156105c357600080fd5b8201836020820111156105d557600080fd5b803590602001918460018302840111640100000000831117156105f757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506126f7565b6040518082815260200191505060405180910390f35b6108666004803603608081101561067557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156106b257600080fd5b8201836020820111156106c457600080fd5b803590602001918460018302840111640100000000831117156106e657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561074957600080fd5b82018360208201111561075b57600080fd5b8035906020019184600183028401116401000000008311171561077d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156107e057600080fd5b8201836020820111156107f257600080fd5b8035906020019184600183028401116401000000008311171561081457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612c34565b604051808215151515815260200191505060405180910390f35b6108c26004803603602081101561089657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612eee565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b83811015610940578082015181840152602081019050610925565b50505050905090810190601f16801561096d5780820380516001836020036101000a031916815260200191505b50858103845288818151815260200191508051906020019080838360005b838110156109a657808201518184015260208101905061098b565b50505050905090810190601f1680156109d35780820380516001836020036101000a031916815260200191505b50858103835287818151815260200191508051906020019080838360005b83811015610a0c5780820151818401526020810190506109f1565b50505050905090810190601f168015610a395780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b83811015610a72578082015181840152602081019050610a57565b50505050905090810190601f168015610a9f5780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b610af660048036036020811015610aca57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061327e565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001806020018060200186810386528b818151815260200191508051906020019080838360005b83811015610b78578082015181840152602081019050610b5d565b50505050905090810190601f168015610ba55780820380516001836020036101000a031916815260200191505b5086810385528a818151815260200191508051906020019080838360005b83811015610bde578082015181840152602081019050610bc3565b50505050905090810190601f168015610c0b5780820380516001836020036101000a031916815260200191505b50868103845289818151815260200191508051906020019080838360005b83811015610c44578082015181840152602081019050610c29565b50505050905090810190601f168015610c715780820380516001836020036101000a031916815260200191505b50868103835288818151815260200191508051906020019080838360005b83811015610caa578082015181840152602081019050610c8f565b50505050905090810190601f168015610cd75780820380516001836020036101000a031916815260200191505b50868103825287818151815260200191508051906020019080838360005b83811015610d10578082015181840152602081019050610cf5565b50505050905090810190601f168015610d3d5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b610d8060048036036020811015610d6a57600080fd5b81019080803590602001909291905050506136ef565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61118e600480360360e0811015610dd857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610e1557600080fd5b820183602082011115610e2757600080fd5b80359060200191846001830284011164010000000083111715610e4957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610eac57600080fd5b820183602082011115610ebe57600080fd5b80359060200191846001830284011164010000000083111715610ee057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610f4357600080fd5b820183602082011115610f5557600080fd5b80359060200191846001830284011164010000000083111715610f7757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610fda57600080fd5b820183602082011115610fec57600080fd5b8035906020019184600183028401116401000000008311171561100e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561107157600080fd5b82018360208201111561108357600080fd5b803590602001918460018302840111640100000000831117156110a557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561110857600080fd5b82018360208201111561111a57600080fd5b8035906020019184600183028401116401000000008311171561113c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050613730565b604051808215151515815260200191505060405180910390f35b611446600480360360a08110156111be57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156111fb57600080fd5b82018360208201111561120d57600080fd5b8035906020019184600183028401116401000000008311171561122f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561129257600080fd5b8201836020820111156112a457600080fd5b803590602001918460018302840111640100000000831117156112c657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561132957600080fd5b82018360208201111561133b57600080fd5b8035906020019184600183028401116401000000008311171561135d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156113c057600080fd5b8201836020820111156113d257600080fd5b803590602001918460018302840111640100000000831117156113f457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050613c36565b604051808215151515815260200191505060405180910390f35b6114a26004803603602081101561147657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613fb4565b604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019080838360005b8381101561152857808201518184015260208101905061150d565b50505050905090810190601f1680156115555780820380516001836020036101000a031916815260200191505b5087810386528c818151815260200191508051906020019080838360005b8381101561158e578082015181840152602081019050611573565b50505050905090810190601f1680156115bb5780820380516001836020036101000a031916815260200191505b5087810385528b818151815260200191508051906020019080838360005b838110156115f45780820151818401526020810190506115d9565b50505050905090810190601f1680156116215780820380516001836020036101000a031916815260200191505b5087810384528a818151815260200191508051906020019080838360005b8381101561165a57808201518184015260208101905061163f565b50505050905090810190601f1680156116875780820380516001836020036101000a031916815260200191505b50878103835289818151815260200191508051906020019080838360005b838110156116c05780820151818401526020810190506116a5565b50505050905090810190601f1680156116ed5780820380516001836020036101000a031916815260200191505b50878103825288818151815260200191508051906020019080838360005b8381101561172657808201518184015260208101905061170b565b50505050905090810190601f1680156117535780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390f35b6117ae6004803603602081101561178257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614507565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001806020018060200186810386528b818151815260200191508051906020019080838360005b83811015611830578082015181840152602081019050611815565b50505050905090810190601f16801561185d5780820380516001836020036101000a031916815260200191505b5086810385528a818151815260200191508051906020019080838360005b8381101561189657808201518184015260208101905061187b565b50505050905090810190601f1680156118c35780820380516001836020036101000a031916815260200191505b50868103845289818151815260200191508051906020019080838360005b838110156118fc5780820151818401526020810190506118e1565b50505050905090810190601f1680156119295780820380516001836020036101000a031916815260200191505b50868103835288818151815260200191508051906020019080838360005b83811015611962578082015181840152602081019050611947565b50505050905090810190601f16801561198f5780820380516001836020036101000a031916815260200191505b50868103825287818151815260200191508051906020019080838360005b838110156119c85780820151818401526020810190506119ad565b50505050905090810190601f1680156119f55780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b611a4e60048036036020811015611a2257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614978565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015611ac8578082015181840152602081019050611aad565b50505050905090810190601f168015611af55780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015611b2e578082015181840152602081019050611b13565b50505050905090810190601f168015611b5b5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b83811015611b94578082015181840152602081019050611b79565b50505050905090810190601f168015611bc15780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b611f09600480360360c0811015611bea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115611c2757600080fd5b820183602082011115611c3957600080fd5b80359060200191846001830284011164010000000083111715611c5b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115611cbe57600080fd5b820183602082011115611cd057600080fd5b80359060200191846001830284011164010000000083111715611cf257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115611d5557600080fd5b820183602082011115611d6757600080fd5b80359060200191846001830284011164010000000083111715611d8957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115611dec57600080fd5b820183602082011115611dfe57600080fd5b80359060200191846001830284011164010000000083111715611e2057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115611e8357600080fd5b820183602082011115611e9557600080fd5b80359060200191846001830284011164010000000083111715611eb757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050614c26565b604051808215151515815260200191505060405180910390f35b612258600480360360c0811015611f3957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115611f7657600080fd5b820183602082011115611f8857600080fd5b80359060200191846001830284011164010000000083111715611faa57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561200d57600080fd5b82018360208201111561201f57600080fd5b8035906020019184600183028401116401000000008311171561204157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156120a457600080fd5b8201836020820111156120b657600080fd5b803590602001918460018302840111640100000000831117156120d857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561213b57600080fd5b82018360208201111561214d57600080fd5b8035906020019184600183028401116401000000008311171561216f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156121d257600080fd5b8201836020820111156121e457600080fd5b8035906020019184600183028401116401000000008311171561220657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050615068565b604051808215151515815260200191505060405180910390f35b6122b46004803603602081101561228857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506154aa565b6040518082815260200191505060405180910390f35b61230c600480360360208110156122e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506159ed565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001806020018060200186810386528b818151815260200191508051906020019080838360005b8381101561238e578082015181840152602081019050612373565b50505050905090810190601f1680156123bb5780820380516001836020036101000a031916815260200191505b5086810385528a818151815260200191508051906020019080838360005b838110156123f45780820151818401526020810190506123d9565b50505050905090810190601f1680156124215780820380516001836020036101000a031916815260200191505b50868103845289818151815260200191508051906020019080838360005b8381101561245a57808201518184015260208101905061243f565b50505050905090810190601f1680156124875780820380516001836020036101000a031916815260200191505b50868103835288818151815260200191508051906020019080838360005b838110156124c05780820151818401526020810190506124a5565b50505050905090810190601f1680156124ed5780820380516001836020036101000a031916815260200191505b50868103825287818151815260200191508051906020019080838360005b8381101561252657808201518184015260208101905061250b565b50505050905090810190601f1680156125535780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b6000600180549050905090565b6000826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601b0190805190602001906125ce929190615e5e565b50816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601c019080519060200190612624929190615e5e565b50600190509392505050565b600080600180549050141561264857600090506126f2565b8173ffffffffffffffffffffffffffffffffffffffff1660016000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601d0154815481106126ad57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161490505b919050565b6000856000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101908051906020019061274e929190615e5e565b50846000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020190805190602001906127a4929190615e5e565b50836000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a0190805190602001906127fa929190615e5e565b50826000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601b019080519060200190612850929190615e5e565b50816000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601c0190805190602001906128a6929190615e5e565b506001808890806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550036000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601d01819055507f530ae23ddba8becbf7c1127448f6245f70daf8fe75ecee6a86cbfd083650cbc98787878787876000808f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601d0154604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001806020018060200187815260200186810386528c818151815260200191508051906020019080838360005b83811015612a44578082015181840152602081019050612a29565b50505050905090810190601f168015612a715780820380516001836020036101000a031916815260200191505b5086810385528b818151815260200191508051906020019080838360005b83811015612aaa578082015181840152602081019050612a8f565b50505050905090810190601f168015612ad75780820380516001836020036101000a031916815260200191505b5086810384528a818151815260200191508051906020019080838360005b83811015612b10578082015181840152602081019050612af5565b50505050905090810190601f168015612b3d5780820380516001836020036101000a031916815260200191505b50868103835289818151815260200191508051906020019080838360005b83811015612b76578082015181840152602081019050612b5b565b50505050905090810190601f168015612ba35780820380516001836020036101000a031916815260200191505b50868103825288818151815260200191508051906020019080838360005b83811015612bdc578082015181840152602081019050612bc1565b50505050905090810190601f168015612c095780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390a1600180805490500390509695505050505050565b6000836000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600e019080519060200190612c8b929190615e5e565b50826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600f019080519060200190612ce1929190615e5e565b50816000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206010019080519060200190612d37929190615e5e565b507f51088688eb1dbc4eac853f150d823f30a068f79591cadf23ee76829f7812738685858585604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015612dd7578082015181840152602081019050612dbc565b50505050905090810190601f168015612e045780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015612e3d578082015181840152602081019050612e22565b50505050905090810190601f168015612e6a5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b83811015612ea3578082015181840152602081019050612e88565b50505050905090810190601f168015612ed05780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a160019050949350505050565b6000606080606080856000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206016016000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206017016000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206018016000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601901838054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156130905780601f1061306557610100808354040283529160200191613090565b820191906000526020600020905b81548152906001019060200180831161307357829003601f168201915b50505050509350828054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561312c5780601f106131015761010080835404028352916020019161312c565b820191906000526020600020905b81548152906001019060200180831161310f57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156131c85780601f1061319d576101008083540402835291602001916131c8565b820191906000526020600020905b8154815290600101906020018083116131ab57829003601f168201915b50505050509150808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156132645780601f1061323957610100808354040283529160200191613264565b820191906000526020600020905b81548152906001019060200180831161324757829003601f168201915b505050505090509450945094509450945091939590929450565b60006060806060806060866000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206011016000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206012016000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206013016000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206014016000808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601501848054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156134635780601f1061343857610100808354040283529160200191613463565b820191906000526020600020905b81548152906001019060200180831161344657829003601f168201915b50505050509450838054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156134ff5780601f106134d4576101008083540402835291602001916134ff565b820191906000526020600020905b8154815290600101906020018083116134e257829003601f168201915b50505050509350828054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561359b5780601f106135705761010080835404028352916020019161359b565b820191906000526020600020905b81548152906001019060200180831161357e57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156136375780601f1061360c57610100808354040283529160200191613637565b820191906000526020600020905b81548152906001019060200180831161361a57829003601f168201915b50505050509150808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156136d35780601f106136a8576101008083540402835291602001916136d3565b820191906000526020600020905b8154815290600101906020018083116136b657829003601f168201915b5050505050905095509550955095509550955091939550919395565b6000600182815481106136fe57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000866000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003019080519060200190613787929190615e5e565b50856000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040190805190602001906137dd929190615e5e565b50846000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005019080519060200190613833929190615e5e565b50836000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006019080519060200190613889929190615e5e565b50826000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080190805190602001906138df929190615e5e565b50816000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007019080519060200190613935929190615e5e565b507fe748197f58387f683f18f2f29b4e657312da3fbf957cfee1cc7ff41893efc4b988888888888888604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019080838360005b838110156139e45780820151818401526020810190506139c9565b50505050905090810190601f168015613a115780820380516001836020036101000a031916815260200191505b5087810386528c818151815260200191508051906020019080838360005b83811015613a4a578082015181840152602081019050613a2f565b50505050905090810190601f168015613a775780820380516001836020036101000a031916815260200191505b5087810385528b818151815260200191508051906020019080838360005b83811015613ab0578082015181840152602081019050613a95565b50505050905090810190601f168015613add5780820380516001836020036101000a031916815260200191505b5087810384528a818151815260200191508051906020019080838360005b83811015613b16578082015181840152602081019050613afb565b50505050905090810190601f168015613b435780820380516001836020036101000a031916815260200191505b50878103835289818151815260200191508051906020019080838360005b83811015613b7c578082015181840152602081019050613b61565b50505050905090810190601f168015613ba95780820380516001836020036101000a031916815260200191505b50878103825288818151815260200191508051906020019080838360005b83811015613be2578082015181840152602081019050613bc7565b50505050905090810190601f168015613c0f5780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390a160019050979650505050505050565b6000846000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206016019080519060200190613c8d929190615e5e565b50836000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206017019080519060200190613ce3929190615e5e565b50826000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206018019080519060200190613d39929190615e5e565b50816000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206019019080519060200190613d8f929190615e5e565b507f768aafbaa2f7200509a9477ef55c47550b6bea458631f1cb60765f0f14eefdcf8686868686604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b83811015613e34578082015181840152602081019050613e19565b50505050905090810190601f168015613e615780820380516001836020036101000a031916815260200191505b50858103845288818151815260200191508051906020019080838360005b83811015613e9a578082015181840152602081019050613e7f565b50505050905090810190601f168015613ec75780820380516001836020036101000a031916815260200191505b50858103835287818151815260200191508051906020019080838360005b83811015613f00578082015181840152602081019050613ee5565b50505050905090810190601f168015613f2d5780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b83811015613f66578082015181840152602081019050613f4b565b50505050905090810190601f168015613f935780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390a16001905095945050505050565b6000606080606080606080876000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006016000808e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008016000808f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600701858054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156141db5780601f106141b0576101008083540402835291602001916141db565b820191906000526020600020905b8154815290600101906020018083116141be57829003601f168201915b50505050509550848054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156142775780601f1061424c57610100808354040283529160200191614277565b820191906000526020600020905b81548152906001019060200180831161425a57829003601f168201915b50505050509450838054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156143135780601f106142e857610100808354040283529160200191614313565b820191906000526020600020905b8154815290600101906020018083116142f657829003601f168201915b50505050509350828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156143af5780601f10614384576101008083540402835291602001916143af565b820191906000526020600020905b81548152906001019060200180831161439257829003601f168201915b50505050509250818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561444b5780601f106144205761010080835404028352916020019161444b565b820191906000526020600020905b81548152906001019060200180831161442e57829003601f168201915b50505050509150808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156144e75780601f106144bc576101008083540402835291602001916144e7565b820191906000526020600020905b8154815290600101906020018083116144ca57829003601f168201915b505050505090509650965096509650965096509650919395979092949650565b60006060806060806060866000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206009016000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600a016000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600b016000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600c016000808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600d01848054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156146ec5780601f106146c1576101008083540402835291602001916146ec565b820191906000526020600020905b8154815290600101906020018083116146cf57829003601f168201915b50505050509450838054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156147885780601f1061475d57610100808354040283529160200191614788565b820191906000526020600020905b81548152906001019060200180831161476b57829003601f168201915b50505050509350828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156148245780601f106147f957610100808354040283529160200191614824565b820191906000526020600020905b81548152906001019060200180831161480757829003601f168201915b50505050509250818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156148c05780601f10614895576101008083540402835291602001916148c0565b820191906000526020600020905b8154815290600101906020018083116148a357829003601f168201915b50505050509150808054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561495c5780601f106149315761010080835404028352916020019161495c565b820191906000526020600020905b81548152906001019060200180831161493f57829003601f168201915b5050505050905095509550955095509550955091939550919395565b60006060806060846000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600e016000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600f016000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601001828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614ad85780601f10614aad57610100808354040283529160200191614ad8565b820191906000526020600020905b815481529060010190602001808311614abb57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614b745780601f10614b4957610100808354040283529160200191614b74565b820191906000526020600020905b815481529060010190602001808311614b5757829003601f168201915b50505050509150808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614c105780601f10614be557610100808354040283529160200191614c10565b820191906000526020600020905b815481529060010190602001808311614bf357829003601f168201915b5050505050905093509350935093509193509193565b6000856000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206011019080519060200190614c7d929190615e5e565b50846000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206012019080519060200190614cd3929190615e5e565b50836000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206013019080519060200190614d29929190615e5e565b50826000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206014019080519060200190614d7f929190615e5e565b50816000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206015019080519060200190614dd5929190615e5e565b507fa6a9be40934ff363b1f30b6d7f5efb968e93ee209027e76111a4d757b234f0a4878787878787604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001806020018060200186810386528b818151815260200191508051906020019080838360005b83811015614e7f578082015181840152602081019050614e64565b50505050905090810190601f168015614eac5780820380516001836020036101000a031916815260200191505b5086810385528a818151815260200191508051906020019080838360005b83811015614ee5578082015181840152602081019050614eca565b50505050905090810190601f168015614f125780820380516001836020036101000a031916815260200191505b50868103845289818151815260200191508051906020019080838360005b83811015614f4b578082015181840152602081019050614f30565b50505050905090810190601f168015614f785780820380516001836020036101000a031916815260200191505b50868103835288818151815260200191508051906020019080838360005b83811015614fb1578082015181840152602081019050614f96565b50505050905090810190601f168015614fde5780820380516001836020036101000a031916815260200191505b50868103825287818151815260200191508051906020019080838360005b83811015615017578082015181840152602081019050614ffc565b50505050905090810190601f1680156150445780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390a1600190509695505050505050565b6000856000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060090190805190602001906150bf929190615e5e565b50846000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600a019080519060200190615115929190615e5e565b50836000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600b01908051906020019061516b929190615e5e565b50826000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600c0190805190602001906151c1929190615e5e565b50816000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600d019080519060200190615217929190615e5e565b507f1524803e278a5368f9376754705f84bef11e06551ad255cb903c707136fabd64878787878787604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001806020018060200186810386528b818151815260200191508051906020019080838360005b838110156152c15780820151818401526020810190506152a6565b50505050905090810190601f1680156152ee5780820380516001836020036101000a031916815260200191505b5086810385528a818151815260200191508051906020019080838360005b8381101561532757808201518184015260208101905061530c565b50505050905090810190601f1680156153545780820380516001836020036101000a031916815260200191505b50868103845289818151815260200191508051906020019080838360005b8381101561538d578082015181840152602081019050615372565b50505050905090810190601f1680156153ba5780820380516001836020036101000a031916815260200191505b50868103835288818151815260200191508051906020019080838360005b838110156153f35780820151818401526020810190506153d8565b50505050905090810190601f1680156154205780820380516001836020036101000a031916815260200191505b50868103825287818151815260200191508051906020019080838360005b8381101561545957808201518184015260208101905061543e565b50505050905090810190601f1680156154865780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390a1600190509695505050505050565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601d0154905060006001808080549050038154811061550657fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806001838154811061554157fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601d018190555060018054809190600190036155e49190615ede565b507fabde18f5e2d51f60790063db1c7b4ef22991b357638eb43f0061bc1fe831b27b8483604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a17fe1eb83632f791d7227687f29de0c319a6225f6802659531b8568c88292f098d7816000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601b016000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601c0187604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001806020018060200186815260200185810385528a8181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156158445780601f1061581957610100808354040283529160200191615844565b820191906000526020600020905b81548152906001019060200180831161582757829003601f168201915b50508581038452898181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156158c75780601f1061589c576101008083540402835291602001916158c7565b820191906000526020600020905b8154815290600101906020018083116158aa57829003601f168201915b505085810383528881815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561594a5780601f1061591f5761010080835404028352916020019161594a565b820191906000526020600020905b81548152906001019060200180831161592d57829003601f168201915b50508581038252878181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156159cd5780601f106159a2576101008083540402835291602001916159cd565b820191906000526020600020905b8154815290600101906020018083116159b057829003601f168201915b50509a505050505050505050505060405180910390a18192505050919050565b60006060806060806060866000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601a016000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601b016000808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020601c01848054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015615bd25780601f10615ba757610100808354040283529160200191615bd2565b820191906000526020600020905b815481529060010190602001808311615bb557829003601f168201915b50505050509450838054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015615c6e5780601f10615c4357610100808354040283529160200191615c6e565b820191906000526020600020905b815481529060010190602001808311615c5157829003601f168201915b50505050509350828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015615d0a5780601f10615cdf57610100808354040283529160200191615d0a565b820191906000526020600020905b815481529060010190602001808311615ced57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015615da65780601f10615d7b57610100808354040283529160200191615da6565b820191906000526020600020905b815481529060010190602001808311615d8957829003601f168201915b50505050509150808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015615e425780601f10615e1757610100808354040283529160200191615e42565b820191906000526020600020905b815481529060010190602001808311615e2557829003601f168201915b5050505050905095509550955095509550955091939550919395565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615e9f57805160ff1916838001178555615ecd565b82800160010185558215615ecd579182015b82811115615ecc578251825591602001919060010190615eb1565b5b509050615eda9190615f0a565b5090565b815481835581811115615f0557818360005260206000209182019101615f049190615f0a565b5b505050565b615f2c91905b80821115615f28576000816000905550600101615f10565b5090565b9056fea265627a7a7231582029a3885ddc795f315387e01ed67f00f8f76da17dc5dc3f40f9fcd78c0edfafa064736f6c634300050b0032";

    public static final String FUNC_GETSANPHAMCOUNT = "getsanphamCount";

    public static final String FUNC_UPDATETRANGTHAI = "updatetrangthai";

    public static final String FUNC_ISSANPHAM = "issanpham";

    public static final String FUNC_INSERTSANPHAM = "insertsanpham";

    public static final String FUNC_INSERTTHUMUA = "insertthumua";

    public static final String FUNC_GETBANLE = "getbanle";

    public static final String FUNC_GETPHANPHOI = "getphanphoi";

    public static final String FUNC_GETSANPHAMATINDEX = "getsanphamAtIndex";

    public static final String FUNC_INSERTCAYGIONG = "insertCaygiong";

    public static final String FUNC_INSERTBANLE = "insertbanle";

    public static final String FUNC_GETCAYGIONG = "getCaygiong";

    public static final String FUNC_GETCAYANTRAI = "getcayantrai";

    public static final String FUNC_GETTHUMUA = "getthumua";

    public static final String FUNC_INSERTPHANPHOI = "insertphanphoi";

    public static final String FUNC_INSERTCAYANTRAI = "insertcayantrai";

    public static final String FUNC_DELETESANPHAM = "deletesanpham";

    public static final String FUNC_GETSANPHAM = "getsanpham";

    public static final Event SETSANPHAM_EVENT = new Event("Setsanpham", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SETCAYGIONG_EVENT = new Event("Setcaygiong", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event SETCAYANTRAI_EVENT = new Event("Setcayantrai", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event SETTHUMUA_EVENT = new Event("Setthumua", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event SETPHANPHOI_EVENT = new Event("Setphanphoi", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event SETBANLE_EVENT = new Event("Setbanle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event UPDATESANPHAM_EVENT = new Event("updatesanpham", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SETLOGDELETESANPHAMMANAGEMENT_EVENT = new Event("SetLogDeletesanphamManagement", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Sanphamnongnghiep(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Sanphamnongnghiep(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Sanphamnongnghiep(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Sanphamnongnghiep(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<BigInteger> getsanphamCount() {
        final Function function = new Function(FUNC_GETSANPHAMCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> updatetrangthai(String _Idsanpham, String _thoigianchinhsua, String _trangthai) {
        final Function function = new Function(
                FUNC_UPDATETRANGTHAI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _Idsanpham), 
                new org.web3j.abi.datatypes.Utf8String(_thoigianchinhsua), 
                new org.web3j.abi.datatypes.Utf8String(_trangthai)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> issanpham(String _Idsanpham) {
        final Function function = new Function(FUNC_ISSANPHAM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _Idsanpham)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> insertsanpham(String _Idsanpham, String _Tensanpham, String _anh, String _thoigiantao, String _thoigianchinhsua, String _trangthai) {
        final Function function = new Function(
                FUNC_INSERTSANPHAM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _Idsanpham), 
                new org.web3j.abi.datatypes.Utf8String(_Tensanpham), 
                new org.web3j.abi.datatypes.Utf8String(_anh), 
                new org.web3j.abi.datatypes.Utf8String(_thoigiantao), 
                new org.web3j.abi.datatypes.Utf8String(_thoigianchinhsua), 
                new org.web3j.abi.datatypes.Utf8String(_trangthai)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> insertthumua(String _Idsanpham, String _Nguoithumua, String _Noithumua, String _Cachthucthumua) {
        final Function function = new Function(
                FUNC_INSERTTHUMUA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _Idsanpham), 
                new org.web3j.abi.datatypes.Utf8String(_Nguoithumua), 
                new org.web3j.abi.datatypes.Utf8String(_Noithumua), 
                new org.web3j.abi.datatypes.Utf8String(_Cachthucthumua)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple5<String, String, String, String, String>> getbanle(String _Idsanpham) {
        final Function function = new Function(FUNC_GETBANLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _Idsanpham)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, String, String, String>>(function,
                new Callable<Tuple5<String, String, String, String, String>>() {
                    @Override
                    public Tuple5<String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple6<String, String, String, String, String, String>> getphanphoi(String _Idsanpham) {
        final Function function = new Function(FUNC_GETPHANPHOI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _Idsanpham)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple6<String, String, String, String, String, String>>(function,
                new Callable<Tuple6<String, String, String, String, String, String>>() {
                    @Override
                    public Tuple6<String, String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> getsanphamAtIndex(BigInteger _index) {
        final Function function = new Function(FUNC_GETSANPHAMATINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> insertCaygiong(String _Idsanpham, String _Khuvuctrongcaygiong, String _Nguoitrongcaygiong, String _Phanboncaygiong, String _Thoivucaygiong, String _Soluongcaygiong, String _Dientichcaygiong) {
        final Function function = new Function(
                FUNC_INSERTCAYGIONG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _Idsanpham), 
                new org.web3j.abi.datatypes.Utf8String(_Khuvuctrongcaygiong), 
                new org.web3j.abi.datatypes.Utf8String(_Nguoitrongcaygiong), 
                new org.web3j.abi.datatypes.Utf8String(_Phanboncaygiong), 
                new org.web3j.abi.datatypes.Utf8String(_Thoivucaygiong), 
                new org.web3j.abi.datatypes.Utf8String(_Soluongcaygiong), 
                new org.web3j.abi.datatypes.Utf8String(_Dientichcaygiong)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> insertbanle(String _Idsanpham, String _Nguoibanle, String _Noibanle, String _Cachthucbanle, String _Baoquanbanle) {
        final Function function = new Function(
                FUNC_INSERTBANLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _Idsanpham), 
                new org.web3j.abi.datatypes.Utf8String(_Nguoibanle), 
                new org.web3j.abi.datatypes.Utf8String(_Noibanle), 
                new org.web3j.abi.datatypes.Utf8String(_Cachthucbanle), 
                new org.web3j.abi.datatypes.Utf8String(_Baoquanbanle)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<String, String, String, String, String, String, String>> getCaygiong(String _Idsanpham) {
        final Function function = new Function(FUNC_GETCAYGIONG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _Idsanpham)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple7<String, String, String, String, String, String, String>>(function,
                new Callable<Tuple7<String, String, String, String, String, String, String>>() {
                    @Override
                    public Tuple7<String, String, String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (String) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple6<String, String, String, String, String, String>> getcayantrai(String _Idsanpham) {
        final Function function = new Function(FUNC_GETCAYANTRAI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _Idsanpham)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple6<String, String, String, String, String, String>>(function,
                new Callable<Tuple6<String, String, String, String, String, String>>() {
                    @Override
                    public Tuple6<String, String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<String, String, String, String>> getthumua(String _Idsanpham) {
        final Function function = new Function(FUNC_GETTHUMUA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _Idsanpham)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple4<String, String, String, String>>(function,
                new Callable<Tuple4<String, String, String, String>>() {
                    @Override
                    public Tuple4<String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> insertphanphoi(String _Idsanpham, String _Diadiemnhan, String _Noiphanphoi, String _Cachthucphanphoi, String _Donggoiphanphoi, String _Baoquanphanphoi) {
        final Function function = new Function(
                FUNC_INSERTPHANPHOI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _Idsanpham), 
                new org.web3j.abi.datatypes.Utf8String(_Diadiemnhan), 
                new org.web3j.abi.datatypes.Utf8String(_Noiphanphoi), 
                new org.web3j.abi.datatypes.Utf8String(_Cachthucphanphoi), 
                new org.web3j.abi.datatypes.Utf8String(_Donggoiphanphoi), 
                new org.web3j.abi.datatypes.Utf8String(_Baoquanphanphoi)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> insertcayantrai(String _Idsanpham, String _Khuvuctrongcayantrai, String _Nguoitrongcayantrai, String _Phanboncayantrai, String _Thoivucayantrai, String _Soluongcayantrai) {
        final Function function = new Function(
                FUNC_INSERTCAYANTRAI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _Idsanpham), 
                new org.web3j.abi.datatypes.Utf8String(_Khuvuctrongcayantrai), 
                new org.web3j.abi.datatypes.Utf8String(_Nguoitrongcayantrai), 
                new org.web3j.abi.datatypes.Utf8String(_Phanboncayantrai), 
                new org.web3j.abi.datatypes.Utf8String(_Thoivucayantrai), 
                new org.web3j.abi.datatypes.Utf8String(_Soluongcayantrai)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deletesanpham(String _sanphamAddress) {
        final Function function = new Function(
                FUNC_DELETESANPHAM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _sanphamAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple6<String, String, String, String, String, String>> getsanpham(String _Idsanpham) {
        final Function function = new Function(FUNC_GETSANPHAM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _Idsanpham)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple6<String, String, String, String, String, String>>(function,
                new Callable<Tuple6<String, String, String, String, String, String>>() {
                    @Override
                    public Tuple6<String, String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue());
                    }
                });
    }

    public List<SetsanphamEventResponse> getSetsanphamEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETSANPHAM_EVENT, transactionReceipt);
        ArrayList<SetsanphamEventResponse> responses = new ArrayList<SetsanphamEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetsanphamEventResponse typedResponse = new SetsanphamEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._Idsanpham = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._Tensanpham = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._anh = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._thoigiantao = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._thoigianchinhsua = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._trangthai = (String) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse._index = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetsanphamEventResponse> setsanphamEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SetsanphamEventResponse>() {
            @Override
            public SetsanphamEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETSANPHAM_EVENT, log);
                SetsanphamEventResponse typedResponse = new SetsanphamEventResponse();
                typedResponse.log = log;
                typedResponse._Idsanpham = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._Tensanpham = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._anh = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._thoigiantao = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._thoigianchinhsua = (String) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._trangthai = (String) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse._index = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetsanphamEventResponse> setsanphamEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETSANPHAM_EVENT));
        return setsanphamEventFlowable(filter);
    }

    public List<SetcaygiongEventResponse> getSetcaygiongEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETCAYGIONG_EVENT, transactionReceipt);
        ArrayList<SetcaygiongEventResponse> responses = new ArrayList<SetcaygiongEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetcaygiongEventResponse typedResponse = new SetcaygiongEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._Idsanpham = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._Khuvuctrongcaygiong = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._Nguoitrongcaygiong = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._Phanboncaygiong = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._Thoivucaygiong = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._Soluongcaygiong = (String) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse._Dientichcaygiong = (String) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetcaygiongEventResponse> setcaygiongEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SetcaygiongEventResponse>() {
            @Override
            public SetcaygiongEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETCAYGIONG_EVENT, log);
                SetcaygiongEventResponse typedResponse = new SetcaygiongEventResponse();
                typedResponse.log = log;
                typedResponse._Idsanpham = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._Khuvuctrongcaygiong = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._Nguoitrongcaygiong = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._Phanboncaygiong = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._Thoivucaygiong = (String) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._Soluongcaygiong = (String) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse._Dientichcaygiong = (String) eventValues.getNonIndexedValues().get(6).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetcaygiongEventResponse> setcaygiongEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETCAYGIONG_EVENT));
        return setcaygiongEventFlowable(filter);
    }

    public List<SetcayantraiEventResponse> getSetcayantraiEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETCAYANTRAI_EVENT, transactionReceipt);
        ArrayList<SetcayantraiEventResponse> responses = new ArrayList<SetcayantraiEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetcayantraiEventResponse typedResponse = new SetcayantraiEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._Idsanpham = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._Khuvuctrongcayantrai = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._Nguoitrongcayantrai = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._Phanboncayantrai = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._Thoivucayantrai = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._Soluongcayantrai = (String) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetcayantraiEventResponse> setcayantraiEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SetcayantraiEventResponse>() {
            @Override
            public SetcayantraiEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETCAYANTRAI_EVENT, log);
                SetcayantraiEventResponse typedResponse = new SetcayantraiEventResponse();
                typedResponse.log = log;
                typedResponse._Idsanpham = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._Khuvuctrongcayantrai = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._Nguoitrongcayantrai = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._Phanboncayantrai = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._Thoivucayantrai = (String) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._Soluongcayantrai = (String) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetcayantraiEventResponse> setcayantraiEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETCAYANTRAI_EVENT));
        return setcayantraiEventFlowable(filter);
    }

    public List<SetthumuaEventResponse> getSetthumuaEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETTHUMUA_EVENT, transactionReceipt);
        ArrayList<SetthumuaEventResponse> responses = new ArrayList<SetthumuaEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetthumuaEventResponse typedResponse = new SetthumuaEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._Idsanpham = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._Nguoithumua = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._Noithumua = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._Cachthucthumua = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetthumuaEventResponse> setthumuaEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SetthumuaEventResponse>() {
            @Override
            public SetthumuaEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETTHUMUA_EVENT, log);
                SetthumuaEventResponse typedResponse = new SetthumuaEventResponse();
                typedResponse.log = log;
                typedResponse._Idsanpham = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._Nguoithumua = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._Noithumua = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._Cachthucthumua = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetthumuaEventResponse> setthumuaEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTHUMUA_EVENT));
        return setthumuaEventFlowable(filter);
    }

    public List<SetphanphoiEventResponse> getSetphanphoiEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETPHANPHOI_EVENT, transactionReceipt);
        ArrayList<SetphanphoiEventResponse> responses = new ArrayList<SetphanphoiEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetphanphoiEventResponse typedResponse = new SetphanphoiEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._Idsanpham = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._Diadiemnhan = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._Noiphanphoi = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._Cachthucphanphoi = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._Donggoiphanphoi = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._Baoquanphanphoi = (String) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetphanphoiEventResponse> setphanphoiEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SetphanphoiEventResponse>() {
            @Override
            public SetphanphoiEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETPHANPHOI_EVENT, log);
                SetphanphoiEventResponse typedResponse = new SetphanphoiEventResponse();
                typedResponse.log = log;
                typedResponse._Idsanpham = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._Diadiemnhan = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._Noiphanphoi = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._Cachthucphanphoi = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._Donggoiphanphoi = (String) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._Baoquanphanphoi = (String) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetphanphoiEventResponse> setphanphoiEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETPHANPHOI_EVENT));
        return setphanphoiEventFlowable(filter);
    }

    public List<SetbanleEventResponse> getSetbanleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETBANLE_EVENT, transactionReceipt);
        ArrayList<SetbanleEventResponse> responses = new ArrayList<SetbanleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetbanleEventResponse typedResponse = new SetbanleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._Idsanpham = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._Nguoibanle = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._Noibanle = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._Cachthucbanle = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._Baoquanbanle = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetbanleEventResponse> setbanleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SetbanleEventResponse>() {
            @Override
            public SetbanleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETBANLE_EVENT, log);
                SetbanleEventResponse typedResponse = new SetbanleEventResponse();
                typedResponse.log = log;
                typedResponse._Idsanpham = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._Nguoibanle = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._Noibanle = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._Cachthucbanle = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._Baoquanbanle = (String) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetbanleEventResponse> setbanleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETBANLE_EVENT));
        return setbanleEventFlowable(filter);
    }

    public List<UpdatesanphamEventResponse> getUpdatesanphamEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATESANPHAM_EVENT, transactionReceipt);
        ArrayList<UpdatesanphamEventResponse> responses = new ArrayList<UpdatesanphamEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdatesanphamEventResponse typedResponse = new UpdatesanphamEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._Idsanpham = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._tensanpham = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._anh = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._thoigianchinhsua = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._trangthai = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdatesanphamEventResponse> updatesanphamEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, UpdatesanphamEventResponse>() {
            @Override
            public UpdatesanphamEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATESANPHAM_EVENT, log);
                UpdatesanphamEventResponse typedResponse = new UpdatesanphamEventResponse();
                typedResponse.log = log;
                typedResponse._Idsanpham = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._tensanpham = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._anh = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._thoigianchinhsua = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._trangthai = (String) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdatesanphamEventResponse> updatesanphamEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATESANPHAM_EVENT));
        return updatesanphamEventFlowable(filter);
    }

    public List<SetLogDeletesanphamManagementEventResponse> getSetLogDeletesanphamManagementEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETLOGDELETESANPHAMMANAGEMENT_EVENT, transactionReceipt);
        ArrayList<SetLogDeletesanphamManagementEventResponse> responses = new ArrayList<SetLogDeletesanphamManagementEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetLogDeletesanphamManagementEventResponse typedResponse = new SetLogDeletesanphamManagementEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._Idsanpham = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetLogDeletesanphamManagementEventResponse> setLogDeletesanphamManagementEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SetLogDeletesanphamManagementEventResponse>() {
            @Override
            public SetLogDeletesanphamManagementEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETLOGDELETESANPHAMMANAGEMENT_EVENT, log);
                SetLogDeletesanphamManagementEventResponse typedResponse = new SetLogDeletesanphamManagementEventResponse();
                typedResponse.log = log;
                typedResponse._Idsanpham = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetLogDeletesanphamManagementEventResponse> setLogDeletesanphamManagementEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETLOGDELETESANPHAMMANAGEMENT_EVENT));
        return setLogDeletesanphamManagementEventFlowable(filter);
    }

    @Deprecated
    public static Sanphamnongnghiep load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Sanphamnongnghiep(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Sanphamnongnghiep load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Sanphamnongnghiep(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Sanphamnongnghiep load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Sanphamnongnghiep(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Sanphamnongnghiep load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Sanphamnongnghiep(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Sanphamnongnghiep> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Sanphamnongnghiep.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Sanphamnongnghiep> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Sanphamnongnghiep.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Sanphamnongnghiep> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Sanphamnongnghiep.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Sanphamnongnghiep> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Sanphamnongnghiep.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class SetsanphamEventResponse extends BaseEventResponse {
        public String _Idsanpham;

        public String _Tensanpham;

        public String _anh;

        public String _thoigiantao;

        public String _thoigianchinhsua;

        public String _trangthai;

        public BigInteger _index;
    }

    public static class SetcaygiongEventResponse extends BaseEventResponse {
        public String _Idsanpham;

        public String _Khuvuctrongcaygiong;

        public String _Nguoitrongcaygiong;

        public String _Phanboncaygiong;

        public String _Thoivucaygiong;

        public String _Soluongcaygiong;

        public String _Dientichcaygiong;
    }

    public static class SetcayantraiEventResponse extends BaseEventResponse {
        public String _Idsanpham;

        public String _Khuvuctrongcayantrai;

        public String _Nguoitrongcayantrai;

        public String _Phanboncayantrai;

        public String _Thoivucayantrai;

        public String _Soluongcayantrai;
    }

    public static class SetthumuaEventResponse extends BaseEventResponse {
        public String _Idsanpham;

        public String _Nguoithumua;

        public String _Noithumua;

        public String _Cachthucthumua;
    }

    public static class SetphanphoiEventResponse extends BaseEventResponse {
        public String _Idsanpham;

        public String _Diadiemnhan;

        public String _Noiphanphoi;

        public String _Cachthucphanphoi;

        public String _Donggoiphanphoi;

        public String _Baoquanphanphoi;
    }

    public static class SetbanleEventResponse extends BaseEventResponse {
        public String _Idsanpham;

        public String _Nguoibanle;

        public String _Noibanle;

        public String _Cachthucbanle;

        public String _Baoquanbanle;
    }

    public static class UpdatesanphamEventResponse extends BaseEventResponse {
        public String _Idsanpham;

        public String _tensanpham;

        public String _anh;

        public String _thoigianchinhsua;

        public String _trangthai;

        public BigInteger index;
    }

    public static class SetLogDeletesanphamManagementEventResponse extends BaseEventResponse {
        public String _Idsanpham;

        public BigInteger index;
    }
}

